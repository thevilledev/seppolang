WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }

program = { SOI ~ (WHITESPACE* ~ (extern_block | function))* ~ WHITESPACE* ~ EOI }

extern_block = { 
    WHITESPACE* ~
    "ceppo" ~ 
    WHITESPACE* ~
    "{" ~ 
    c_code ~
    "}" ~
    WHITESPACE*
}

c_code = @{ 
    (
        "{" ~ c_code ~ "}" |  // Handle nested braces recursively
        !("{" | "}") ~ ANY    // Or consume any character that's not a brace
    )*
}

function = { 
    WHITESPACE* ~
    "fn" ~ 
    WHITESPACE* ~
    identifier ~ 
    WHITESPACE* ~
    "(" ~ 
    WHITESPACE* ~
    param_list? ~ 
    WHITESPACE* ~
    ")" ~ 
    WHITESPACE* ~
    block 
}

param_list = { identifier ~ ("," ~ WHITESPACE* ~ identifier)* }
block = { "{" ~ WHITESPACE* ~ statement* ~ WHITESPACE* ~ "}" }

statement = { WHITESPACE* ~ (print_stmt | assignment | return_stmt | expression) ~ WHITESPACE* }
return_stmt = { "return" ~ WHITESPACE* ~ expression }

print_stmt = { print_command ~ WHITESPACE* ~ print_item }
print_command = { "seppo" | "0xseppo" }
print_item = { expression }

assignment = { identifier ~ WHITESPACE* ~ "=" ~ WHITESPACE* ~ expression }
expression = { operation | function_call | number | string_literal| identifier }
operation = { (number | identifier) ~ WHITESPACE* ~ operator ~ WHITESPACE* ~ (number | identifier) }
operator = { "+" | "-" | "*" | "/" }

function_call = { identifier ~ WHITESPACE* ~ "(" ~ WHITESPACE* ~ arg_list? ~ WHITESPACE* ~ ")" }
arg_list = { expression ~ ("," ~ WHITESPACE* ~ expression)* }

number = @{ ASCII_DIGIT+ }
identifier = @{ !("return" | "fn" | "ceppo") ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
variable = @{ identifier } 

string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }